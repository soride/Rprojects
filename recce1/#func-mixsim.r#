### Functions for simulating ironX and DISTANCE sampling
## rm(list = ls())
library(spatstat)
library(DSpat)
## Define line segment for DISTANCE sampling Ape density 2.16 ind/km2
## in Ndoki-Likouala Conservation landscape over 27,970 km2 sampled
## with 168 x 2 km transects (Stokes et al. 2010) [0.006 transects/km2
## ~ 240 x 2 km transects for 40,000 km2]166 x 2km transects for
## 28,000 km2 (stokes 2010)

## Set up equations for the random sine curve walk
                                        #w=.001 #.002999 #half-width of sampling walk
                                        #f14=4 #frequency of random walk sine curve
                                        #A14=0.25 #amplitude of random walk in km
yp14<-function(x) A14*sin(x*f14*pi/14) + w #lines(x,ym10(x),type="l")
ym14<-function(x) A14*sin(x*f14*pi/14) - w #lines(x,yp10(x),type="l")
                                        #fV=4 #frequency of random walk sine curve
                                        #AV=0.25 #amplitude of random walk in km
                                        #V=ls$lines[[1]][2,2]-ls$lines[[1]][1,2]
                                        #x=seq(0,V,0.001)
ypV<-function(x) AV*sin(x*fV*pi/V) + w
ymV<-function(x) AV*sin(x*fV*pi/V) - w
inputs<-list()

inputs[[1]]<-sampledf <-data.frame(random_basic(100,fecal_prev=0.1))

xseed<-sample(seq(0,9,0.001),1)  #set random start for transects
study.area=owin(xrange=c(xseed,xseed+2),yrange=c(0,65)) #one vertical
                                        #set
inputs[[2]]<-xp<-create.lines(study.area,nlines=4,width=.002,spacing=100,angle=180)

##test<-mixsim(inputs)

##plot(1,1,type='n',xlim=c(0,65),ylim=c(0,65))
##matplot(t(test[[6]][,c(2,4)]),t(test[[6]][,c(3,5)]),type='l',add=TRUE,col="blue",lty=1,lwd=2,cex=0.5)
##points(test[[1]],test[[2]],pch=20,cex=0.5)
##points(test[[10]][,2:3],cex=3,col="blue",pch=19)
##targeted IronXn green


dist2line.sho <- function (ptnlines) #measures distances from points
                                        #to line segment
{
    x.bar = ptnlines[,2]
    y.bar = ptnlines[,3]
    x0 = ptnlines[,4]
    y0 = ptnlines[,5]
    x1 = ptnlines[,6]
    y1 = ptnlines[,7]
    distVals =  abs((x1-x0)*(y0-y.bar)-(x0-x.bar)*(y1-y0))/sqrt((x1-x0)^2+(y1-y0)^2)
    return(distance = distVals)
}

mixsim<-function(inputs){
    xvals <- inputs[[1]][,2]
    yvals <- inputs[[1]][,3]
    xp<-inputs[[2]]
    label  <- c(1:4)
    col1<-cbind(label,xp[,2:3]+16,xp[,4:6])
    col2<-cbind(label,col1[,2:3]+16,xp[,4:6])
    col3<-cbind(label,col2[,2:3]+16,xp[,4:6])
    linesdf <- rbind(xp,col1,col2,col3) #4 verticals sets
    study.area=owin(xrange=c(0,65),yrange=c(0,65))
    ls=lines_to_strips(linesdf,study.area) #converted to stripsrm
    V<-ls$lines$end[2,2]-ls$lines$end[1,2]
    label <- c(1:nrow(ls$lines$end))
    dsort<-matrix(nrow=length(xvals),ncol=3)
    dsort[,1]<-xvals
    dsort[,2]<-yvals
    dsort[,3]<-rep(999,length(xvals))
    for (j in 1:length(xvals))
    {
        for (i in 1:16){
            if(
               (dsort[j,1] <= ls$transects[i][[1]]$x[1]) &
               (dsort[j,1] >= ls$transects[i][[1]]$x[3]) &
               (dsort[j,2] <= ls$transects[i][[1]]$y[1]) &
               (dsort[j,2] >= ls$transects[i][[1]]$y[3])
               )
            { dsort[j,3]<-i }
        }
    }
    for (k in 1:length(xvals)) {
        for (m in 1:12){  ## inside horizontal recces
            if(
               (dsort[k,1] >= ls$lines$end[m,1]) &
               (dsort[k,1] <= ls$lines$end[m,1]+14) &
               (dsort[k,2] >= ym14(dsort[k,2])+ ls$lines$end[m,2])&
               (dsort[k,2] <= yp14(dsort[k,2])+ ls$lines$end[m,2])
               )
                dsort[k,3]<-m+100}
        if(             ## inside lower left V recce
           (dsort[k,2] >= ls$lines$end[1,4]) &
           (dsort[k,2] <= ls$lines$end[2,4]) &
           (dsort[k,1] >= rotatepts(dsort[k,1]+ls$lines$end[3,4],
                 ymV(dsort[k,1])-ls$lines$end[1,3],pi/2)[1]) &
           (dsort[k,1] <= rotatepts(dsort[k,1]+ls$lines$end[3,4],
                 ypV(dsort[k,1])-ls$lines$end[1,3],pi/2)[1])
           )
            dsort[k,3]<-201
        if(
           (dsort[k,2] >= ls$lines$end[3,4])&
           (dsort[k,2] <= ls$lines$end[4,4])&
           (dsort[k,1] >= rotatepts(dsort[k,1]+ls$lines$end[3,4],
                 ymV(dsort[k,1])-ls$lines$end[3,3],pi/2)[1]) &
           (dsort[k,1] <= rotatepts(dsort[k,1]+ls$lines$end[3,4],
                 ypV(dsort[k,1])-ls$lines$end[3,3],pi/2)[1])
           )
            dsort[k,5]<-202
        if(
           (dsort[k,2] >= ls$lines[[1]][2,4])&
           (dsort[k,2] <= ls$lines[[1]][3,4])&
           (dsort[k,1] >= rotatepts(dsort[k,1]+ls$lines$end[3,4],
                 ymV(dsort[k,1])-ls$lines$end[14,1],pi/2)[1])&
           (dsort[k,1] <= rotatepts(dsort[k,1]+ls$lines$end[3,4],
                 ypV(dsort[k,1])-ls$lines$end[14,1],pi/2)[1])
           )
            dsort[k,5]<-203
    }
    colnames(dsort)<-c("xvals","yvals","label")
    dsortdf<-data.frame(dsort)
    label <- c(1:nrow(ls$lines$end))
    linesdf<-data.frame(label,ls$lines$ends)  ##dataframe of transects
    curves<-matrix(nrow=15,ncol=5)  ##matrix of recce curves
    colnames(curves)<-c("label","x0","y0","x1","y1")
    curves[1:15,1]<- c(101:112,201:203)
    curves[1:12,2] <- linesdf$x0[1:12]
    curves[1:12,3] <- linesdf$y0[1:12]
    curves[1:12,4] <- linesdf$x1[5:16]
    curves[1:12,5] <- linesdf$y1[5:16]
    curves[13,2:5] <-
        c(linesdf$x1[1],linesdf$y1[1],linesdf$x1[2],linesdf$y1[2])
    curves[14,2:5] <-
        c(linesdf$x1[3],linesdf$y1[3],linesdf$x1[4],linesdf$y1[4])
    curves[15,2:5] <-
        c(linesdf$x0[14],linesdf$y0[14],linesdf$x0[15],linesdf$y0[15])
    curvesdf<-data.frame(curves)
    mixedf<-rbind(linesdf,curvesdf)
    keep<-dsortdf[dsortdf[,3]!=999,]
    ptnlines<-merge(keep,mixedf,by="label") #alldf
    realD <-dist2line.sho(ptnlines)
    samples <-cbind(ptnlines,realD)
    out<-list(xvals,yvals,xp,ls,dsortdf,mixedf,keep,ptnlines,realD,samples)
    out
}



    results [i,3] <- 1 * 110.61 * .25
    results [i,4] <- isamples/60/i1area
    return(results)
}
sims(n,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
init[[1]]<- p4 
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(n=2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
w
   init[[2]] <- ironX0    #input pattern df
    init[[3]] <- nironXs <- 1 #count of ironXs on the landscape
    init[[4]] <- w
    ir1  <- simulate(init)
init
summary(init))
summary(init)
summary(basic)
    ir1  <- simulate(init)
simulate()
simulate
inputs<-init
  nsegs = 8
    inframe<-inputs[[1]][(inputs[[1]]$px>=10 & inputs[[1]]$px<=55) & (inputs[[1]]$py>=10 & inputs[[1]]$py<=55),]
    row<-sample(1:nrow(inframe),inputs[[3]])   #here n controls
                                        #number of ironXs
    xvals<-inframe[row,2]    #x center points of IronXs
    yvals<-inframe[row,3]    #y center points of ironY
    angles<-c(-pi/4,-pi/2,-3*pi/4,0,25*pi/180,-65*pi/180,25*pi/180,-65*pi/180)
    ##angles of line segments to horizontal
    patterndf<-data.frame(move_ironXs(inputs[[2]],xvals,yvals,nsegs,angles))
    ##dataframe of x1y1 and x2y2 line segments
    distdf<-data.frame(pointdistanceALL(patterndf,inputs[[1]],nsegs=8))  #measure  distances d
    alldf<-merge(distdf,patterndf,by=c("fignumber","segnumber"))
    origindf<-rotmove(alldf)
pointdistanceALL
inputs[[1]]
sampledf
simulate
pointdistanceALL
init[[1]]
 init[[1]]
 init[[1]][[2]]
init[[2]]
init[[1][[2]]]
init[[1][[2]]
init[[1]][[2]]
sampledf
sampledf<-init[[1]]
sampledf
sampledf[[2]]
init[[1]]
function(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(2,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(30,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
simulate
inputs
ir1[[10]]
ir1[[8]]
ir1[[3]]
summary(ir1[[3]])
p1<-dr1[[10]][,2:3]
colnames(p1)<-c("px","py")
p2<-rbind(ir1[[8]][,5:6],p1)
p3<-cbind(c(1:8),p2,c(1:8),c(rep(0.1,8)))
p4<-rbind(p3,c(1,2))

init[[1]]<- p4  #9 point
sims(30,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
p1<-dr1[[10]][,2:3]
colnames(p1)<-c("px","py")
p2<-rbind(ir1[[8]][13,5:6],p1)
p3<-cbind(c(1:8),p2,c(1:8),c(rep(0.1,8)))
p4<-rbind(p3,c(1,2))

init[[1]]<- p4  
p4
sims(30,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(30,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
distancesim
init[[1]]
init[[1]][,2]
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
  inputs[[1]] <- init[[1]]
        ##inputs[[1]]<-basic[[1]]
        ##xseed<-sample(seq(0,10,0.002),1)  #set random start for transects
        ##study.area=owin(xrange=c(xseed,xseed+2),yrange=c(0,65)) #one vertical set of transects
        inputs[[2]]<-dr1[[3]]#create.lines(study.area,nlines=4,width=.002,spacing=100,angle=180)
        dr1 <-distancesim(inputs)
dr1[[9]]
nrow(dr1[[9]])
dr1
init[[1]]
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
p1<-dr1[[10]][,2:3]
colnames(p1)<-c("px","py")
p2<-rbind(ir1[[8]][,5:6],p1)
p3<-cbind(c(1:8),p2,c(1:8),c(rep(0.1,8)))
p4<-rbind(p3,c(1,2))

init[[1]]<- p4
sims(1,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
40,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
sims(50,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
quartz()
plot(c(0,65),c(0,65),type="n")
points(out[[8]][,5:6],pch=19,col="red") #sampled points
points(out[[10]][,5:6],pch=19,col="red") #sampled points
matplot(t(out[[3]][,c(1,3)]),t(out[[3]][,c(2,4)]),type='l',add=TRUE,col="red",lty=1)
test<-dr1
plot(test[[4]] $lines,lty=1, add=TRUE,col="blue")
points(test[[10]][,2:3],pch=19,col="blue")
device$print("test.jpg")
jpeg(file="test.jpg")
plot(c(0,65),c(0,65),type="n")
points(out[[8]][,5:6],pch=19,col="red") #sampled points
points(out[[10]][,5:6],pch=19,col="red") #sampled points
matplot(t(out[[3]][,c(1,3)]),t(out[[3]][,c(2,4)]),type='l',add=TRUE,col="red",lty=1)
test<-dr1
plot(test[[4]] $lines,lty=1, add=TRUE,col="blue")
points(test[[10]][,2:3],pch=19,col="blue")
dev.off()
sds
 test1 <- sims(n,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
 test1 <- sims(n,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
test1
n=9
 test2 <- sims(n,init,ironX0,w,yp10,ym10,yp8,ym8,i1area,darea)
test3<-rbind(test1,test2)
test3
write.csv(file="r5e5_july5.csv",test3)
test3
summary(test3)
i1area<-4*(integrate(yp10,-10,10)[[1]] - integrate (ym10,-10,10)[[1]])+ 4*(integrate(yp8,0,7.65366)[[1]] - integrate (ym8,0,7.65366)[[1]]) #area between
                                        #2 curve
i1area
i1areab<-2*(integrate(yp10,-10,10)[[1]] - integrate (ym10,-10,10)[[1]])+ 4*(integrate(yp8,0,7.65366)[[1]] - integrate (ym8,0,7.65366)[[1]]) #area between
i1areab
test
test3
iegord*(i1areab/i1area)
test3[,5]*(i1areab/i1area)
iegord<-test3[,5]*(i1areab/i1area)
test3[,5]<-iegord
test3
write.csv(file="r5e5_july5.csv",test3)
summary(test3)
summary(test3[,5])
var(test3[,5])
var(test3[,8])
test3[,2]<-c(1:10)
test3
summary(test3[,5])
intervals(test3[,5])
plot(test[,5])
plotCI(test[,5])
sd(test[,5])
sd(test3,[,5])
sd(test3[,5])
sd(test3[,8])
.5350727^2
sd(test3$iegord)
quartz()
par(mfrow=c(2,3), mgp=c(0,0,0), pty="m")
for (i in c(1,2,4,8,16,32))
    plot(rMatClust(i, 0.04, 50), main=paste("Matern kappa=",i),owin=(c(0,65),c(65,0)))

    clust<-rThomas(1, 3, 10)
clust
clust$x
clus$y
clust$y
clust$k
rThomas
clust$kappa
summary(clust)
    clust<-rThomas(1, 3, 10,win=owin(c(0,65),c(0,65))
)
summary(clust)
plot(clust)
clust$kappa
rNeymanScott
par(mfrow=c(2,3), mgp=c(0,0,0), pty="m")
for (i in c(1,2,4,8,16,32))
    plot(rMatClust(i, 20, 60), main=paste("Matern kappa=",i),win=owin(c(0,65),c(65,65)))

cat<-rMatClust(kappa=10,r= 20, mu=100, win=owin(c(0,65),c(65,65)))
dim(caty)
library(spatstat)
length(cat)
summary(cat)
plot(cat)
for (i in c(1,2,4,8,16,32))
    plot(rMatClust(kappa=1,r= 20, mu=1, win=owin(c(0,65),c(0,65))),
         main=paste("Mattern kappa=",i))
summary(cat$x)
quartz()
)
random_clusterM<-function (k,r,mu,fecal_prev)  #Matern
{
    clust<-rMatClust(k,r,mu)
    clust$x <- 65*clust$x
    clust$y <- 65*clust$y
    indata<-matrix(NA, nrow=clust$n,ncol=5)
    indata[,2]<-clust$x
    indata[,3]<-clust$y
    indata[,4]<-sample(c(0,1),clust$n,
                       replace = TRUE, prob =
                       c(1-fecal_prev,fecal_prev))
    indata[,5]<-rep(fecal_prev,clust$n)
    colnames(indata)<-c("id","px","py","pf","fecal_prev")
    indata
}
 vap<- random_clusterM(4,20,60))
 vap<- random_clusterM(4,20,60)
 vap<- random_clusterM(4,20,60,.1)
vap$n
summary(vap)
length(vap$px)
length(vap[,3])
)
rep(1:5,each=4)
n5e5<-data.frame(cbind(rbind(rand,tR20n5e5,tR10n5e5,tR5n5e5,tR3n5e5),rep(("rand","tR20","tR10","tR5","tR3",each=15))))
n5e5<-data.frame(cbind(rbind(rand,tR20n5e5,tR10n5e5,tR5n5e5,tR3n5e5),rep(c("rand","tR20","tR10","tR5","tR3",each=15))))
colnames(n5e5))
colnames(n5e5)
colnames(n5e5)[10]<-c("sim")
n5e5
table(n5e5)
n5e5
library(gplots)
install.packages("gplots")
n5e5
summary(n5e5,by="sim")
boxplot(count ~ spray, data = InsectSprays, col = "lightgray")
boxplot(iegord ~ sim, data=n5e5,col="lightgray")
rug()
boxplot(degord~sim, data=n5e5,col="lightgray")
quartz()
boxplot(iegord ~ sim, data=n5e5,col="lightgray")
boxplot
boxplot()
boxplot(degord~sim,data=n5e5,boxwex=0.25,at=1:4-0.2,
        col="blue",main="Transect and Recce simulation",
        xlab="Simulation",
        ylab="Gorilla density estimate",ylim=c(0,20))
boxplot(iegord~sim,data=n5e5, add=True,boxwex=0.25, at 1:4+0.2,
        col="red")
boxplot(iegord~sim,data=n5e5, add=True,boxwex=0.25, at=1:4+0.2,
        col="red")
colnames(n5e5))
colnames(n5e5))
colnames(n5e5)
quartz()
summary(n5e5)
(palette(gray(seq(0,.9,len=25)))) #
gray(0:8 / 8)
quartz()
colnames(n5e5)
quartz()
summary(rand))
summary(rand)
var(rand$iegord))
var(rand$iegord)
var(rand$degord)
rand
summary(r5e5_jully18)
summary(r5e5_july18)
summary(rand)
var(rand$iegord)
var(int$iegord)
var(rand$degord)
var(int$degord)
 n5e5
colnames(n5e5))
colnames(n5e5)
n5e5$gord
summary(n5e5)
length(n5e5$gord))
length(n5e5$gord)
n5e5
n5e5
quartz()
colnames(arand)
dim(atR3n5e5)
colnames(atR3n5e5)
quartz()
par(mfrow=c(1,5))
plot(c(0,65),c(0,65),type="n")
points(atR3n5e5[,3:4],pch=19,cex=.01)
6.5/5
dim(atR5n5e5)
dlkfj
adsfalksfja
dslfkad
lf;jads
l;fjads
;lfja
s;
escape
)
i1length
all<-rbind(IR,IT,D)
sampleff<-all$samples/all$edays
km <-ifelse(all$type=="D",i1length,16*2)
all2<-cbind(all,km)
i1length<-109.0344
fit<-glm(samples~type+k+degord, offset=log(km), data=all2,family=poisson())
summary(fit)
SD
mlogit(fit)
mlogit.display(fit)
ordinal.or.display(fit)
regress.display(fit)
ci(fit)
summary(fit)
)
 coef(fit)
std.error(fit)
sd(fit)
fit
fit
exp(coeff(fit)[2])
exp(coef(fit)[2])
exp(coef(fit)[3])
exp(2.3)
summary(fit)
summary(fit[[1]])
summary(fit[1])
summary(fit[1][1])
coef()
coef(fit)
barplot2(tapply(samples/km,list(type,k),mean),beside=TRUE,
         col= c("lightblue","mistyrose","lightcyan"),
         legend=(c("Random IronX","Targeted IronX","Distance")),
         ylim=c(0,4),
         plot.ci=TRUE, ci.l=-1*(tapply(samples/km,listtype,k),sd))+tapply(samples/km,list(type,k),mean),        ci.u=1*(tapply(samples/km,list(type,k),sd))+tapply(sampleff,list(type,k),mean),
         cex.names=1,plot.grid=TRUE,col.sub="gray20"
         )
mtext("Clustering (k)",1,cex=1.5,line=2.5)
mtext("Samples -km",2,cex=1.5,line=2.5)
mtext("Samples -km",3,cex=1.5,line=1.5)
mtext("[bars indicate  +/- 1 sd]",3,line=-1.5)
barplot2(tapply(samples/km,list(type,k),mean),beside=TRUE,
         col= c("lightblue","mistyrose","lightcyan"),
         legend=(c("Random IronX","Targeted IronX","Distance")),
         ylim=c(0,4),
         plot.ci=TRUE, ci.l=-1*(tapply(samples/km,list(type,k),sd))+tapply(samples/km,list(type,k),mean),        ci.u=1*(tapply(samples/km,list(type,k),sd))+tapply(sampleff,list(type,k),mean),
         cex.names=1,plot.grid=TRUE,col.sub="gray20"
         )
barplot2(tapply(samples/km,list(type,k),mean),beside=TRUE,
         col= c("lightblue","mistyrose","lightcyan"),
         legend=(c("Random IronX","Targeted IronX","Distance")),
         ylim=c(0,4),
         plot.ci=TRUE, ci.l=-1*(tapply(samples/km,list(type,k),sd))+tapply(samples/km,list(type,k),mean),        ci.u=1*(tapply(samples/km,list(type,k),sd))+tapply(sampleff,list(type,k),mean),
         cex.names=1,plot.grid=TRUE,col.sub="gray20",
         data=all2
         )
colnames(all2)
barplot2(tapply(all2$samples/all2$km,list(all2$type,all2$k),mean),beside=TRUE,
         col= c("lightblue","mistyrose","lightcyan"),
         legend=(c("Random IronX","Targeted IronX","Distance")),
         ylim=c(0,4),
         plot.ci=TRUE, ci.l=-1*(tapply(all2$samples/all2$km,list(all2$type,all2$k),sd))+tapply(all2$samples/all2$km,list(all2$type,all2$k),mean),        ci.u=1*(tapply(all2$samples/all2$km,list(all2$type,all2$k),sd))+tapply(all2$samples/all2$km,list(all2$type,all2$k),mean),
         cex.names=1,plot.grid=TRUE,col.sub="gray20",
         data=all2
         )
barplot2(tapply(all2$samples/all2$km,list(all2$type,all2$k),mean),beside=TRUE,
         col= c("lightblue","mistyrose","lightcyan"),
         legend=(c("Random IronX","Targeted IronX","Distance")),
         ylim=c(0,4),
         plot.ci=TRUE, ci.l=-1*(tapply(all2$samples/all2$km,list(all2$type,all2$k),sd))+tapply(all2$samples/all2$km,list(all2$type,all2$k),mean),        ci.u=1*(tapply(all2$samples/all2$km,list(all2$type,all2$k),sd))+tapply(all2$samples/all2$km,list(all2$type,all2$k),mean),
         cex.names=1,plot.grid=TRUE,col.sub="gray20"
         )
get.wd
getwd()
y10prime2<-function (x) sqrt(1+(A10*(f10*pi/10)*cos(x*f10*pi/10))^2)

i1length
expci95(coef(fit)[2], 0.0321049)
summary(fit))
summary(fit)
fitout
fitout
sd(all2$k)
fitout
fitout
colnames(all2))
colnames(all2)
zk<-((k[,11]-mean(all2$k))/sd(all2$k))

zk
plot(zk)
colnames(all2)
fitout
sd(all2[,7])
)
colnames(all2))
colnames(all2)
summary(all2)
which(all2$dev==2.1666))
which(all2$dev==2.1666)
which(all2[,9]==2.16)
all2[all2$dev>2,]
bIXR
summary(bIXR)
summary(bIXT)
summary(bD)
hist(dev)
quartz()
hist(all3$dev)
hist(log(all3$dev))
hist(all3$dev)
par(mfrow=c(2,2))
hist(all3$dev)
hist(all3[all3$type=="IXR",9])
hist(all3[all3$type=="IXT",9])
hist(all3[all3$type=="D",9])
table(all3$dev,all3$type,all3$degord)
table(all3$type,all3$degord,all3$dev)
table(all3$type,all3$dev)
table(all3$type,all3$degord)
ncol(all3)
nrows(all3)
nrow(all3)
75/15
60/5
90/5
table(all$type,all$degord)
table(allIR$type,allIR$degord)
table(IR$type,IR$degord)
table(IR$type,IR$degord)
dim(hk3)
dim(hk3[[2]])
dim(hk5[[2]])
15*5
dim(hk10[[2]])
dim(hk20[[2]])
dim(hk100[[2]])
dim(mk3[[2]])
dim(mk5[[2]])
dim(mk10[[2])
dim(mk10[[2]])
dim(mk20[[2]])
dim(mk100[[2]])
dim(allIR)
15*15
table(IR$type,IR$degord)
75+60+90
colnames(hir)
rm(list = ls())
table(hir)$type,hir$degord)
colnames(hir)
table(hir$kvalues,hir$degord)
table(hit$kvalues,hit$degord)
table(hd$kvalues,hd$degord)
table(mir$kvalues,mir$degord)
table(lir$kvalues,lir$degord)
table(mit$kvalues,mit$degord)
table(md$kvalues,md$degord)
table(lit$kvalues,lit$degord)
table(ld$kvalues,ld$degord)
czech<-data.frame(mk100[[8]])
colnames(czech)
table(czech$degord,czech$nobjects)
cz20<-data.frame(mk20[[8]])
table(cz20$degord,cz2$nobjects)
table(cz20$degord,cz20$nobjects)
cz10<-data.frame(mka0[[8]])
cz10<-data.frame(mk10[[8]])
table(cz10$degord,cz10$nobjects)
cz5<-data.frame(mk5[[8]])
table(cz5$degord,cz5$nobjects)
cz3<-data.frame(mk3[[8]])
table(cz3$degord,cz3$nobjects)
rm(list = ls())
table(all3$k,all3$degord)
table(all2$k,all2$degord)
fitout
summary(bD)
summary(bIXT)
summary(bIXR)
table(all3$k,all3$type)
IR<-data.frame(cbind(allIR,dev),type,k)

allIT<-rbind(hk3[[5]],hk5[[5]],hk10[[5]],hk20[[5]],hk100[[5]],mk3[[5]],mk5[[5]],mk10[[5]],mk20[[5]],mk100[[5]],lk3[[5]],lk5[[5]],lk10[[5]],lk20[[5]],lk100[[5]])
dev<-allIT[,7]-allIT[,4]
type<-rep("IXT",225)
k<-rep(c(2.5,5,10,20,100),each=15, times=3)
IT<-data.frame(cbind(allIT,dev),type,k)

allD<-rbind(hk3[[8]],hk5[[8]],hk10[[8]],hk20[[8]],hk100[[8]],mk3[[8]],mk5[[8]],mk10[[8]],mk20[[8]],mk100[[8]],lk3[[8]],lk5[[8]],lk10[[8]],lk20[[8]],lk100[[8]])
dev<-allD[,7]-allD[,4]
type<-rep("D",225)
k<-rep(c(2.5,5,10,20,100),each=15, times=3)
D<-data.frame(cbind(allD,dev),type,k)

i1length<-112.1621
all<-rbind(IR,IT,D)
sampleff<-all$samples/all$edays
km <-ifelse(all$type=="D",i1length,16*2)
all2<-cbind(all,km)
write.csv(file="all.csv",all)
write.csv(file="all2.csv",all2)


## Deviance by density for each sampling type
par(mfrow=c(2,3))
boxplot(dev~round(degord,2),data=all[all$type=="IXR",],
        xlab="Density ind -km2",
        ylab="Deviance",
        main="Random IronX Deviance")
abline(h=0,lty=3)
boxplot(dev~round(degord,2),data=all[all$type=="IXT",],
        xlab="Density ind -km2",
        ylab="Deviance",
        main="Targeted IronX Deviance")
abline(h=0,lty=3)
boxplot(dev~round(degord,2),data=all[all$type=="D",],
        xlab="Density ind -km2",
        ylab="Deviance",
        main="Distance Transect Deviance")
abline(h=0,lty=3)
## Deviance by clustering for each sampling type
boxplot(dev~k,data=all[all$type=="IXR",],
        xlab="K value",
        ylab="Deviance",
        main="Random IronX Deviance")
abline(h=0,lty=3)
boxplot(dev~k,data=all[all$type=="IXT",],
        xlab="K value",
        ylab="Deviance",
        main="Targeted IronX Deviance")
abline(h=0,lty=3)
boxplot(dev~k,data=all[all$type=="D",],
        xlab="K value",
        ylab="Deviance",
        main="Distance Transect Deviance")
abline(h=0,lty=3)

## No. of samples  by density and sampling type
quartz()
par(mfrow=c(2,3))
boxplot(samples~round(degord,2),data=all[all$type=="IXR",],
        xlab="Density ind -km2",
        ylab="No. samples",
        main="Random IronX Samples")
abline(h=0,lty=3)
boxplot(samples~round(degord,2),data=all[all$type=="IXT",],
        xlab="Density ind -km2",
        ylab="No. samples",
        main="Targeted IronX Samples")
abline(h=0,lty=3)
boxplot(samples~round(degord,2),data=all[all$type=="D",],
        xlab="Density ind -km2",
        ylab="No. samples",
        main="Distance Transect Samples")
abline(h=0,lty=3)
## No. of samples  by density and sampling type
boxplot(samples~k,data=all[all$type=="IXR",],
        xlab="K value",
        ylab="No. samples",
        main="Random IronX Samples")
abline(h=0,lty=3)
boxplot(samples~k,data=all[all$type=="IXT",],
        xlab="K value",
        ylab="No. samples",
        main="Targeted IronX Samples")
abline(h=0,lty=3)
boxplot(samples~k,data=all[all$type=="D",],
        xlab="K value",
        ylab="No. samples",
        main="Distance Transect Samples")
abline(h=0,lty=3)

## No. of samples  by density and sampling type adjusted for area
pdf(file="6-barplotadjarea.pdf")
boxplot(samples/i1length~k,data=all[all$type=="IXR",],
        xlab="K value",
        ylab="No. samples -km",
        main="Random IronX Samples")
abline(h=0,lty=3)
boxplot(samples/i1length~k,data=all[all$type=="IXT",],
        xlab="K value",
        ylab="No. samples -km",
        main="Targeted IronX Samples")
abline(h=0,lty=3)
boxplot(samples/32~k,data=all[all$type=="D",],
        xlab="K value",
        ylab="No. samples -km",
        main="Distance Transect Samples")
abline(h=0,lty=3)
##tapply(all$samples,list(all$type,all$k),sd)
##tapply(all$samples,list(all$type,all$k),mean)
dev.off()

## Barplots with 1 sd confidence intervals for no. of samples and
## sampling efficiency by clustering and sampling type
## par(mfrow=c(2,1))
pdf(file="6-barplotssamples.pdf")
barplot2(tapply(all$samples,list(all$type,all$k),mean),beside=TRUE,
         col= c("lightblue","mistyrose","lightcyan"),
         legend=(c("Random IronX","Targeted IronX","Distance")),
         ylim=c(0,100),
         plot.ci=TRUE,
         ci.l=-1*(tapply(all$samples,list(all$type,all$k),sd)) +tapply(all$samples,list(all$type,all$k),mean),
         ci.u=1*(tapply(all$samples,list(all$type,all$k),sd)) +tapply(all$samples,list(all$type,all$k),mean),
         cex.names=1,plot.grid=TRUE,col.sub="gray20"
         )
mtext("Clustering (k)",1,cex=1.5,line=2.5)
mtext("No. of samples",2,cex=1.5,line=2.5)
mtext("No. of samples",3,cex=1.5,line=1.5)
mtext("[bars indicate  +/- 1 sd]",3,line=-1.5)
barplot2(
)
summary(all2)
dim(hir)
dim(hit)
table(hd$degord,hd$k)
table(mir$degord,mir$k)
table(mit$degord,mit$k)
table(md$degord,md$k)
table(ld$degord,ld$k)
table(lit$degord,lit$k)
rm(list = ls())
table(all2$k,all2$type)
table(md$degord,md$k)
summary(all2)
fitout
summary(all2)
bD
summary(bD)
summary(bIXT)
quartz()
levelplot(devall)
summary(allIXR$dev))
summary(allIXR$dev)
summary(allIXT$dev)
summary(allD$dev)
heat.colors(7, alpha = 1)
heat.colors(10)
cm.colors(10)
i(heat.colors(10))
I(heat.colors(10)
)
heat.colors(10)
heat.colors(10)[10:1]
cm.colors(10)[5,7]
cm.colors(10)[c(5,7)]
quartz()
maprun(hk3,1)
quartz()
maprun(hk3,1)
quartz()
mapall(hk3,1)
dev.off()
3*7.5/5
7.5*5/3
7*5/3
6*5/3
quartz()
par(mfrow=c(1,3),mar=c(2,2,2,2))
maprun(mk5,1)
mapIXR(mk5,1)
maprun(mk5,1)
mapIXT(mk5,1)
maprun(mk5,1)
mapD(mk5,1)
quit()
